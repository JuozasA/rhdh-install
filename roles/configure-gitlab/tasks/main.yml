---
# tasks file for configure-gitlab

- name: Pause for 5 minutes waiting for GitLab
  ansible.builtin.pause:
    minutes: 5

- name: Check GitLab Liveness
  ansible.builtin.uri:
    url: https://gitlab-gitlab.{{ OCP_BASE }}/api/v4/projects
    method: GET
    validate_certs: false
  register: r_liveness
  retries: 60
  delay: 10
  until: r_liveness.status == 200

#- name: Generate root user personal token
#  shell: |
#    oc exec $POD -n gitlab -- /bin/sh -c /scripts/create-root-pat.sh
#    POD=$(oc get pod -l app=gitlab -n gitlab --no-headers | awk '{print $1}')
#    ROOT_PAT=$(oc exec $POD -n gitlab -- /bin/sh -c "cat /tmp/root.pat")
#    oc delete secret root-user-personal-token -n gitlab --ignore-not-found
#    oc create secret generic root-user-personal-token --from-literal=token=$ROOT_PAT -n gitlab

- name: Retrieve root token
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: root-user-personal-token
    namespace: gitlab
  register: r_root_token
  failed_when: r_root_token.resources[0].data.token | length == 0

- name:
  debug:
    var: r_root_token

- name: Decode root token
  set_fact:
    root_token: '{{ r_root_token.resources[0].data.token | b64decode }}'

- name: Update application settings
  ansible.builtin.uri:
    url: https://gitlab-gitlab.{{ OCP_BASE }}/api/v4/application/settings
    method: PUT
    body_format: form-urlencoded
    body:
      import_sources: "git,github,gitea"
      version_check_enabled: "false"
      allow_local_requests_from_web_hooks_and_services: "true"
    headers:
      PRIVATE-TOKEN: '{{ root_token }}'
    validate_certs: false
    status_code: 200

- name: List users and check if already configured
  ansible.builtin.uri:
    url: https://gitlab-gitlab.{{ OCP_BASE }}/api/v4/users?username=user1
    method: GET
    headers:
      PRIVATE-TOKEN: '{{ root_token }}'
    validate_certs: false
    status_code: 200
  register: r_existingusers

- name: debug pre existing users
  debug:
    var: r_existingusers

- name: Create users
  when: r_existingusers.json | length ==0
  ignore_errors: true
  ansible.builtin.uri:
    url: https://gitlab-gitlab.{{ OCP_BASE }}/api/v4/users
    method: POST
    body_format: form-urlencoded
    body:
      admin: false
      email: "{{ item }}@demo.redhat.com"
      public_email: "{{ item }}@demo.redhat.com"
      skip_confirmation: true
      username: "{{ item }}"
      password: Developerhub123!
      name: "{{ item }} GitLab"
    headers:
      PRIVATE-TOKEN: '{{ root_token }}'
    validate_certs: false
    status_code: 201
  register: r_user
  loop:
    - user1
    - user2
    - user3
    - user4
    - user5

- name: List users
  ansible.builtin.uri:
    url: https://gitlab-gitlab.{{ OCP_BASE }}/api/v4/users?per_page=100
    method: GET
    headers:
      PRIVATE-TOKEN: '{{ root_token }}'
    validate_certs: false
    status_code: 200
  register: r_users

- name: List groups
  ansible.builtin.uri:
    url: https://gitlab-gitlab.{{ OCP_BASE }}/api/v4/groups?per_page=100
    method: GET
    headers:
      PRIVATE-TOKEN: '{{ root_token }}'
    validate_certs: false
    status_code: 200
  register: r_existing_groups

- name: Create group development
  when: r_existing_groups.json | length == 0
  ignore_errors: true
  ansible.builtin.uri:
    url: https://gitlab-gitlab.{{ OCP_BASE }}/api/v4/groups
    method: POST
    body_format: form-urlencoded
    body:
      name: development
      path: development
      visibility: public
    headers:
      PRIVATE-TOKEN: '{{ root_token }}'
    validate_certs: false
    status_code: 201
  register: r_group

- name: Add users to development group
  when: r_existing_groups.json | length == 0 and item.username.startswith('user')
  ansible.builtin.uri:
    url: https://gitlab-gitlab.{{ OCP_BASE }}/api/v4/groups/{{ r_group.json.id }}/members
    method: POST
    body_format: form-urlencoded
    body:
      user_id: '{{ item.id }}'
      access_level: 50
    headers:
      PRIVATE-TOKEN: '{{ root_token }}'
    validate_certs: false
    status_code: 201
  register: r_group_user
  retries: 100
  delay: 5
  until: r_group_user.status == 201
  loop: '{{ r_users.json }}'

- name: Create group rhdh
  when: r_existing_groups.json | length == 0
  ignore_errors: true
  ansible.builtin.uri:
    url: https://gitlab-gitlab.{{ OCP_BASE }}/api/v4/groups
    method: POST
    body_format: form-urlencoded
    body:
      name: rhdh
      path: rhdh
      visibility: public
    headers:
      PRIVATE-TOKEN: '{{ root_token }}'
    validate_certs: false
    status_code: 201
  register: r_group

- name: Set gitlab rhdh group info
  set_fact:
    rhdh_group: '{{ r_group }}'

- name: Add users to rhdh group
  when: r_existing_groups.json | length == 0 and item.username.startswith('user')
  ansible.builtin.uri:
    url: https://gitlab-gitlab.{{ OCP_BASE }}/api/v4/groups/{{ r_group.json.id }}/members
    method: POST
    body_format: form-urlencoded
    body:
      user_id: '{{ item.id }}'
      access_level: 50
    headers:
      PRIVATE-TOKEN: '{{ root_token }}'
    validate_certs: false
    status_code: 201
  register: r_group_user
  retries: 100
  delay: 5
  until: r_group_user.status == 201
  loop: '{{ r_users.json }}'

# need to create a personal access token for RHDH to use git
- name: Create pat for use by RHDH
  ansible.builtin.uri:
    url: https://gitlab-gitlab.{{ OCP_BASE }}/api/v4/users/1/personal_access_tokens
    method: POST
    body_format: form-urlencoded
    body:
      name: "rhdh token"
      scopes: "api, read_api, read_user, read_repository, write_repository, sudo, admin_mode"
    headers:
      PRIVATE-TOKEN: '{{ root_token }}'
    validate_certs: false
    status_code: 201
  register: new_pat 


- name: Set gitlab pat
  set_fact:
    gitlab_pat: '{{ new_pat.json.token }}'

# need to create an application for use by keycloak 

- name: Create keycloak application for oidc
  ansible.builtin.uri:
    url: https://gitlab-gitlab.{{ OCP_BASE }}/api/v4/applications
    method: POST
    body_format: form-urlencoded
    body:
      name: "keycloak"
      redirect_uri: "https://keycloak-rhsso.{{ OCP_BASE }}/auth/realms/backstage/broker/GitLab/endpoint"
      scopes: "api read_user read_repository write_repository sudo openid profile email"
      confidential: false
    headers:
      PRIVATE-TOKEN: '{{ root_token }}'
    validate_certs: false
    status_code: 201
  register: gitlab_keycloak_app 

- name: Set gitlab application_id
  set_fact:
    gitlab_id: '{{ gitlab_keycloak_app.json.application_id }}'

- name: Set gitlab application secret
  set_fact:
    gitlab_secret: '{{ gitlab_keycloak_app.json.secret }}'
